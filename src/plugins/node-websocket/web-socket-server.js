const WebSocket = require('isomorphic-ws')
const ContactAddressProtocolType = require('../contact-type/contact-address-protocol-type')

module.exports = class WebSocketServer extends WebSocket.Server {

    constructor(kademliaNode, options = {}) {

        super({
            maxPayload: KAD_OPTIONS.PLUGINS.NODE_WEBSOCKET.MAX_TRANSFER_PAYLOAD_SIZE,
            ...options
        });

        this._kademliaNode = kademliaNode;

        this.on('connection', this.newClientConnection );

    }

    async newClientConnection(ws){

        /**
         * Connection Handshake is considered not safe as the certificate can be generated by a hijacked dns. So, Connection Handshake will require forced encryption using public keys.
         * Once the connection handshake is verified, the SSL is considered safe as their is proof from both parties of owning the private keys of the contact public keys.
         */

        try{

            const out = await this._kademliaNode.rules.receiveSerialized( ws, 0, undefined, ContactAddressProtocolType.CONTACT_ADDRESS_PROTOCOL_TYPE_WEBSOCKET, Buffer.from( ws.protocol, "hex"), {forceEncryption: true, returnNotAllowed: true});

            if (!this._kademliaNode.rules._checkWebSocket(out[0]))
                ws.close();
            else
                new this._kademliaNode.rules.PluginNodeWebsocketConnectionSocketClass(this._kademliaNode.rules, ws, out[0], );

        }catch(err){
            if (err) return ws.close();

        }

    }


}